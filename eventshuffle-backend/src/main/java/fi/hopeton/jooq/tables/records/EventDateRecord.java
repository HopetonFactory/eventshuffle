/*
 * This file is generated by jOOQ.
 */
package fi.hopeton.jooq.tables.records;


import fi.hopeton.jooq.tables.EventDate;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EventDateRecord extends UpdatableRecordImpl<EventDateRecord> implements Record4<Long, LocalDate, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>EVENT_DATE.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Create a detached EventDateRecord
     */
    public EventDateRecord() {
        super(EventDate.EVENT_DATE);
    }

    /**
     * Setter for <code>EVENT_DATE.PROPOSED_DATE</code>.
     */
    public void setProposedDate(LocalDate value) {
        set(1, value);
    }

    /**
     * Create a detached, initialised EventDateRecord
     */
    public EventDateRecord(Long id, LocalDate proposedDate, Long eventId, Long version) {
        super(EventDate.EVENT_DATE);

        setId(id);
        setProposedDate(proposedDate);
        setEventId(eventId);
        setVersion(version);
    }

    /**
     * Setter for <code>EVENT_DATE.EVENT_ID</code>.
     */
    public void setEventId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>EVENT_DATE.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Getter for <code>EVENT_DATE.PROPOSED_DATE</code>.
     */
    public LocalDate getProposedDate() {
        return (LocalDate) get(1);
    }

    /**
     * Getter for <code>EVENT_DATE.EVENT_ID</code>.
     */
    public Long getEventId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>EVENT_DATE.VERSION</code>.
     */
    public Long getVersion() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>EVENT_DATE.VERSION</code>.
     */
    public void setVersion(Long value) {
        set(3, value);
    }

    @Override
    public Field<Long> field1() {
        return EventDate.EVENT_DATE.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return EventDate.EVENT_DATE.PROPOSED_DATE;
    }

    @Override
    public Field<Long> field3() {
        return EventDate.EVENT_DATE.EVENT_ID;
    }

    @Override
    public Row4<Long, LocalDate, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getProposedDate();
    }

    @Override
    public Row4<Long, LocalDate, Long, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field4() {
        return EventDate.EVENT_DATE.VERSION;
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getProposedDate();
    }

    @Override
    public Long component3() {
        return getEventId();
    }

    @Override
    public Long component4() {
        return getVersion();
    }

    @Override
    public EventDateRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public EventDateRecord value2(LocalDate value) {
        setProposedDate(value);
        return this;
    }

    @Override
    public EventDateRecord value3(Long value) {
        setEventId(value);
        return this;
    }

    @Override
    public EventDateRecord value4(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public EventDateRecord values(Long value1, LocalDate value2, Long value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    public Long value3() {
        return getEventId();
    }

    @Override
    public Long value4() {
        return getVersion();
    }
}
