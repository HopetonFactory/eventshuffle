/*
 * This file is generated by jOOQ.
 */
package fi.hopeton.jooq.tables.daos;


import fi.hopeton.jooq.tables.Persons;
import fi.hopeton.jooq.tables.records.PersonsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PersonsDao extends DAOImpl<PersonsRecord, fi.hopeton.jooq.tables.pojos.Persons, Integer> {

    /**
     * Create a new PersonsDao without any configuration
     */
    public PersonsDao() {
        super(Persons.PERSONS, fi.hopeton.jooq.tables.pojos.Persons.class);
    }

    /**
     * Create a new PersonsDao with an attached configuration
     */
    public PersonsDao(Configuration configuration) {
        super(Persons.PERSONS, fi.hopeton.jooq.tables.pojos.Persons.class, configuration);
    }

    @Override
    public Integer getId(fi.hopeton.jooq.tables.pojos.Persons object) {
        return object.getPersonId();
    }

    /**
     * Fetch records that have <code>PERSON_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.Persons> fetchRangeOfPersonId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Persons.PERSONS.PERSON_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PERSON_ID IN (values)</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.Persons> fetchByPersonId(Integer... values) {
        return fetch(Persons.PERSONS.PERSON_ID, values);
    }

    /**
     * Fetch a unique record that has <code>PERSON_ID = value</code>
     */
    public fi.hopeton.jooq.tables.pojos.Persons fetchOneByPersonId(Integer value) {
        return fetchOne(Persons.PERSONS.PERSON_ID, value);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.Persons> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Persons.PERSONS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.Persons> fetchByName(String... values) {
        return fetch(Persons.PERSONS.NAME, values);
    }
}
