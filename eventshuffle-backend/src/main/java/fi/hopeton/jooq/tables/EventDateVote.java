/*
 * This file is generated by jOOQ.
 */
package fi.hopeton.jooq.tables;


import fi.hopeton.jooq.DefaultSchema;
import fi.hopeton.jooq.Keys;
import fi.hopeton.jooq.tables.records.EventDateVoteRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EventDateVote extends TableImpl<EventDateVoteRecord> {

    /**
     * The reference instance of <code>EVENT_DATE_VOTE</code>
     */
    public static final EventDateVote EVENT_DATE_VOTE = new EventDateVote();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>EVENT_DATE_VOTE.ID</code>.
     */
    public final TableField<EventDateVoteRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");
    /**
     * The column <code>EVENT_DATE_VOTE.VOTING_PERSON</code>.
     */
    public final TableField<EventDateVoteRecord, String> VOTING_PERSON = createField(DSL.name("VOTING_PERSON"), SQLDataType.VARCHAR(100).nullable(false), this, "");
    /**
     * The column <code>EVENT_DATE_VOTE.EVENT_DATE_ID</code>.
     */
    public final TableField<EventDateVoteRecord, Long> EVENT_DATE_ID = createField(DSL.name("EVENT_DATE_ID"), SQLDataType.BIGINT.nullable(false), this, "");
    private transient EventDate _eventDate;

    private EventDateVote(Name alias, Table<EventDateVoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventDateVote(Name alias, Table<EventDateVoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>EVENT_DATE_VOTE</code> table reference
     */
    public EventDateVote(String alias) {
        this(DSL.name(alias), EVENT_DATE_VOTE);
    }

    /**
     * Create an aliased <code>EVENT_DATE_VOTE</code> table reference
     */
    public EventDateVote(Name alias) {
        this(alias, EVENT_DATE_VOTE);
    }

    /**
     * Create a <code>EVENT_DATE_VOTE</code> table reference
     */
    public EventDateVote() {
        this(DSL.name("EVENT_DATE_VOTE"), null);
    }

    public <O extends Record> EventDateVote(Table<O> child, ForeignKey<O, EventDateVoteRecord> key) {
        super(child, key, EVENT_DATE_VOTE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventDateVoteRecord> getRecordType() {
        return EventDateVoteRecord.class;
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<EventDateVoteRecord, Long> getIdentity() {
        return (Identity<EventDateVoteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventDateVoteRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<UniqueKey<EventDateVoteRecord>> getKeys() {
        return Arrays.<UniqueKey<EventDateVoteRecord>>asList(Keys.CONSTRAINT_D);
    }

    @Override
    public List<ForeignKey<EventDateVoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventDateVoteRecord, ?>>asList(Keys.CONSTRAINT_D5);
    }

    public EventDate eventDate() {
        if (_eventDate == null)
            _eventDate = new EventDate(this, Keys.CONSTRAINT_D5);

        return _eventDate;
    }

    @Override
    public EventDateVote as(String alias) {
        return new EventDateVote(DSL.name(alias), this);
    }

    @Override
    public EventDateVote as(Name alias) {
        return new EventDateVote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventDateVote rename(String name) {
        return new EventDateVote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventDateVote rename(Name name) {
        return new EventDateVote(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
