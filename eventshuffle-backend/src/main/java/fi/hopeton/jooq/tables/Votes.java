/*
 * This file is generated by jOOQ.
 */
package fi.hopeton.jooq.tables;


import fi.hopeton.jooq.DefaultSchema;
import fi.hopeton.jooq.Keys;
import fi.hopeton.jooq.tables.records.VotesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Votes extends TableImpl<VotesRecord> {

    /**
     * The reference instance of <code>VOTES</code>
     */
    public static final Votes VOTES = new Votes();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>VOTES.ID</code>.
     */
    public final TableField<VotesRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>VOTES.VOTING_PERSON_ID</code>.
     */
    public final TableField<VotesRecord, Long> VOTING_PERSON_ID = createField(DSL.name("VOTING_PERSON_ID"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>VOTES.PROPOSED_DATES</code>.
     */
    public final TableField<VotesRecord, Long> PROPOSED_DATES = createField(DSL.name("PROPOSED_DATES"), SQLDataType.BIGINT, this, "");
    private transient Persons _persons;
    private transient ProposedDates _proposedDates;

    private Votes(Name alias, Table<VotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Votes(Name alias, Table<VotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>VOTES</code> table reference
     */
    public Votes(String alias) {
        this(DSL.name(alias), VOTES);
    }

    /**
     * Create an aliased <code>VOTES</code> table reference
     */
    public Votes(Name alias) {
        this(alias, VOTES);
    }

    /**
     * Create a <code>VOTES</code> table reference
     */
    public Votes() {
        this(DSL.name("VOTES"), null);
    }

    public <O extends Record> Votes(Table<O> child, ForeignKey<O, VotesRecord> key) {
        super(child, key, VOTES);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VotesRecord> getRecordType() {
        return VotesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<VotesRecord, Integer> getIdentity() {
        return (Identity<VotesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VotesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public List<UniqueKey<VotesRecord>> getKeys() {
        return Arrays.<UniqueKey<VotesRecord>>asList(Keys.CONSTRAINT_4);
    }

    @Override
    public List<ForeignKey<VotesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VotesRecord, ?>>asList(Keys.CONSTRAINT_4E, Keys.CONSTRAINT_4E1);
    }

    public Persons persons() {
        if (_persons == null)
            _persons = new Persons(this, Keys.CONSTRAINT_4E);

        return _persons;
    }

    public ProposedDates proposedDates() {
        if (_proposedDates == null)
            _proposedDates = new ProposedDates(this, Keys.CONSTRAINT_4E1);

        return _proposedDates;
    }

    @Override
    public Votes as(String alias) {
        return new Votes(DSL.name(alias), this);
    }

    @Override
    public Votes as(Name alias) {
        return new Votes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(String name) {
        return new Votes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(Name name) {
        return new Votes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
