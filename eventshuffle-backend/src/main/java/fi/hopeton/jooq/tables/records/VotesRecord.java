/*
 * This file is generated by jOOQ.
 */
package fi.hopeton.jooq.tables.records;


import fi.hopeton.jooq.tables.Votes;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class VotesRecord extends UpdatableRecordImpl<VotesRecord> implements Record3<Integer, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached VotesRecord
     */
    public VotesRecord() {
        super(Votes.VOTES);
    }

    /**
     * Getter for <code>VOTES.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Create a detached, initialised VotesRecord
     */
    public VotesRecord(Integer id, Long votingPersonId, Long proposedDates) {
        super(Votes.VOTES);

        setId(id);
        setVotingPersonId(votingPersonId);
        setProposedDates(proposedDates);
    }

    /**
     * Getter for <code>VOTES.VOTING_PERSON_ID</code>.
     */
    public Long getVotingPersonId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>VOTES.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>VOTES.PROPOSED_DATES</code>.
     */
    public Long getProposedDates() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Votes.VOTES.ID;
    }

    @Override
    public Field<Long> field2() {
        return Votes.VOTES.VOTING_PERSON_ID;
    }

    @Override
    public Field<Long> field3() {
        return Votes.VOTES.PROPOSED_DATES;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getVotingPersonId();
    }

    @Override
    public Long component3() {
        return getProposedDates();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getVotingPersonId();
    }

    @Override
    public Long value3() {
        return getProposedDates();
    }

    @Override
    public VotesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public VotesRecord value2(Long value) {
        setVotingPersonId(value);
        return this;
    }

    @Override
    public VotesRecord value3(Long value) {
        setProposedDates(value);
        return this;
    }

    @Override
    public VotesRecord values(Integer value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>VOTES.VOTING_PERSON_ID</code>.
     */
    public void setVotingPersonId(Long value) {
        set(1, value);
    }

    /**
     * Setter for <code>VOTES.PROPOSED_DATES</code>.
     */
    public void setProposedDates(Long value) {
        set(2, value);
    }
}
