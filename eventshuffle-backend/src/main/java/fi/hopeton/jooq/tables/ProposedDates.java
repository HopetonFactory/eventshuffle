/*
 * This file is generated by jOOQ.
 */
package fi.hopeton.jooq.tables;


import fi.hopeton.jooq.DefaultSchema;
import fi.hopeton.jooq.Keys;
import fi.hopeton.jooq.tables.records.ProposedDatesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProposedDates extends TableImpl<ProposedDatesRecord> {

    /**
     * The reference instance of <code>PROPOSED_DATES</code>
     */
    public static final ProposedDates PROPOSED_DATES = new ProposedDates();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>PROPOSED_DATES.PROPOSED_DATE_ID</code>.
     */
    public final TableField<ProposedDatesRecord, Integer> PROPOSED_DATE_ID = createField(DSL.name("PROPOSED_DATE_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>PROPOSED_DATES.EVENT_DATE</code>.
     */
    public final TableField<ProposedDatesRecord, LocalDate> EVENT_DATE = createField(DSL.name("EVENT_DATE"), SQLDataType.LOCALDATE, this, "");
    /**
     * The column <code>PROPOSED_DATES.EVENT_ID</code>.
     */
    public final TableField<ProposedDatesRecord, Long> EVENT_ID = createField(DSL.name("EVENT_ID"), SQLDataType.BIGINT, this, "");
    private transient Events _events;

    private ProposedDates(Name alias, Table<ProposedDatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProposedDates(Name alias, Table<ProposedDatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PROPOSED_DATES</code> table reference
     */
    public ProposedDates(String alias) {
        this(DSL.name(alias), PROPOSED_DATES);
    }

    /**
     * Create an aliased <code>PROPOSED_DATES</code> table reference
     */
    public ProposedDates(Name alias) {
        this(alias, PROPOSED_DATES);
    }

    /**
     * Create a <code>PROPOSED_DATES</code> table reference
     */
    public ProposedDates() {
        this(DSL.name("PROPOSED_DATES"), null);
    }

    public <O extends Record> ProposedDates(Table<O> child, ForeignKey<O, ProposedDatesRecord> key) {
        super(child, key, PROPOSED_DATES);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProposedDatesRecord> getRecordType() {
        return ProposedDatesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ProposedDatesRecord, Integer> getIdentity() {
        return (Identity<ProposedDatesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProposedDatesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    @Override
    public List<UniqueKey<ProposedDatesRecord>> getKeys() {
        return Arrays.<UniqueKey<ProposedDatesRecord>>asList(Keys.CONSTRAINT_A);
    }

    @Override
    public List<ForeignKey<ProposedDatesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProposedDatesRecord, ?>>asList(Keys.CONSTRAINT_A3);
    }

    public Events events() {
        if (_events == null)
            _events = new Events(this, Keys.CONSTRAINT_A3);

        return _events;
    }

    @Override
    public ProposedDates as(String alias) {
        return new ProposedDates(DSL.name(alias), this);
    }

    @Override
    public ProposedDates as(Name alias) {
        return new ProposedDates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProposedDates rename(String name) {
        return new ProposedDates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProposedDates rename(Name name) {
        return new ProposedDates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
