/*
 * This file is generated by jOOQ.
 */
package fi.hopeton.jooq.tables.daos;


import fi.hopeton.jooq.tables.EventDateVote;
import fi.hopeton.jooq.tables.records.EventDateVoteRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EventDateVoteDao extends DAOImpl<EventDateVoteRecord, fi.hopeton.jooq.tables.pojos.EventDateVote, Long> {

    /**
     * Create a new EventDateVoteDao without any configuration
     */
    public EventDateVoteDao() {
        super(EventDateVote.EVENT_DATE_VOTE, fi.hopeton.jooq.tables.pojos.EventDateVote.class);
    }

    /**
     * Create a new EventDateVoteDao with an attached configuration
     */
    public EventDateVoteDao(Configuration configuration) {
        super(EventDateVote.EVENT_DATE_VOTE, fi.hopeton.jooq.tables.pojos.EventDateVote.class, configuration);
    }

    @Override
    public Long getId(fi.hopeton.jooq.tables.pojos.EventDateVote object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(EventDateVote.EVENT_DATE_VOTE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchById(Long... values) {
        return fetch(EventDateVote.EVENT_DATE_VOTE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public fi.hopeton.jooq.tables.pojos.EventDateVote fetchOneById(Long value) {
        return fetchOne(EventDateVote.EVENT_DATE_VOTE.ID, value);
    }

    /**
     * Fetch records that have <code>VOTING_PERSON BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchRangeOfVotingPerson(String lowerInclusive, String upperInclusive) {
        return fetchRange(EventDateVote.EVENT_DATE_VOTE.VOTING_PERSON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VOTING_PERSON IN (values)</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchByVotingPerson(String... values) {
        return fetch(EventDateVote.EVENT_DATE_VOTE.VOTING_PERSON, values);
    }

    /**
     * Fetch records that have <code>EVENT_DATE_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchRangeOfEventDateId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(EventDateVote.EVENT_DATE_VOTE.EVENT_DATE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>EVENT_DATE_ID IN (values)</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchByEventDateId(Long... values) {
        return fetch(EventDateVote.EVENT_DATE_VOTE.EVENT_DATE_ID, values);
    }

    /**
     * Fetch records that have <code>VERSION BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchRangeOfVersion(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(EventDateVote.EVENT_DATE_VOTE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VERSION IN (values)</code>
     */
    public List<fi.hopeton.jooq.tables.pojos.EventDateVote> fetchByVersion(Long... values) {
        return fetch(EventDateVote.EVENT_DATE_VOTE.VERSION, values);
    }
}
